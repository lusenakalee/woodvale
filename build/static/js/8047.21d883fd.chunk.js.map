{"version":3,"file":"static/js/8047.21d883fd.chunk.js","mappings":"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","sources":["components/ResidentComps/ResidentList.js","pages/ResidentPages/AllResidentsPage.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  InformationCircleIcon,\r\n  PrinterIcon,\r\n} from \"@heroicons/react/24/outline\";\r\nimport {\r\n  Icon,\r\n  Table,\r\n  TableRow,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeaderCell,\r\n  TableBody,\r\n  BadgeDelta,\r\n  Title,\r\n  Flex,\r\n  Select,\r\n  SelectItem,\r\n  MultiSelect,\r\n  MultiSelectItem,\r\n} from \"@tremor/react\";\r\nimport Papa from \"papaparse\";\r\n\r\n\r\nexport default function ResidentList({ residentsList }) {\r\n  const [selectedResidentNames, setSelectedResidentNames] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1); // Current page number\r\n  \r\n  const isResidentSelected = (resident) =>\r\n  selectedResidentNames.includes(resident.first_name) ||\r\n  selectedResidentNames.length === 0;\r\n  \r\n  const filteredResidents = residentsList.filter(isResidentSelected);\r\n  \r\n  const handleExportCSV = () => {\r\n    const csvData = Papa.unparse(filteredResidents);\r\n    const blob = new Blob([csvData], { type: \"text/csv;charset=utf-8;\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", url);\r\n    link.setAttribute(\"download\", \"residents.csv\");\r\n    link.style.visibility = \"hidden\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n  \r\n  // Calculate pagination\r\n  const RESIDENTS_PER_PAGE = 10; // Set the number of residents to display per page\r\n  const totalResidents = filteredResidents.length;\r\n  const totalPages = Math.ceil(totalResidents / RESIDENTS_PER_PAGE);\r\n\r\n  // Get the slice of residents to display based on the current page\r\n  const startIndex = (currentPage - 1) * RESIDENTS_PER_PAGE;\r\n  const endIndex = startIndex + RESIDENTS_PER_PAGE;\r\n  const residentsToShow = filteredResidents.slice(startIndex, endIndex);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Flex\r\n          className=\"space-x-0.5\"\r\n          justifyContent=\"start\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Title>Residents</Title>\r\n          <Icon\r\n            icon={InformationCircleIcon}\r\n            variant=\"simple\"\r\n            tooltip=\"Shows general employee information\"\r\n          />\r\n        </Flex>\r\n      </div>\r\n      <div className=\"flex space-x-2\">\r\n        <MultiSelect\r\n          className=\"max-w-full sm:max-w-xs\"\r\n          onValueChange={setSelectedResidentNames}\r\n          placeholder=\"Select resident...\"\r\n        >\r\n          {residentsList.map((item) => (\r\n            <MultiSelectItem\r\n              key={item.first_name}\r\n              value={item.first_name}\r\n              label={`${item.first_name} ${item.last_name}`}\r\n            />\r\n          ))}\r\n        </MultiSelect>\r\n\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleExportCSV}\r\n          className=\"inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50\"\r\n        >\r\n          <PrinterIcon\r\n            className=\"-ml-0.5 mr-1.5 h-5 w-5 text-gray-400\"\r\n            aria-hidden=\"true\"\r\n          />\r\n          Export\r\n        </button>\r\n      </div>\r\n      <Table className=\"mt-6 table w-full\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableHeaderCell className=\"\">First Name</TableHeaderCell>\r\n            <TableHeaderCell className=\" text-left\">Last Name</TableHeaderCell>\r\n            <TableHeaderCell className=\" text-left\">Age</TableHeaderCell>\r\n            <TableHeaderCell className=\" text-left\">\r\n              Date Registered\r\n            </TableHeaderCell>\r\n            <TableHeaderCell className=\" text-left\">Gender</TableHeaderCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {residentsToShow.map((item) => (\r\n            <TableRow key={item.id} className=\"hover:bg-white\">\r\n              <TableCell className=\" hover:text-indigo-600 hover:underline\">\r\n                <Link to={`./${item.id}`}>{item.first_name}</Link>\r\n              </TableCell>\r\n              <TableCell className=\" text-left\">{item.last_name}</TableCell>\r\n              <TableCell className=\" text-left\">{item.age}</TableCell>\r\n              <TableCell className=\" text-left\">\r\n                {item.date_registered}\r\n              </TableCell>\r\n              <TableCell className=\" text-left\">{item.gender}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n\r\n      {/* Pagination */}\r\n      <ol className=\"flex justify-center gap-1 text-xs font-medium mt-4\">\r\n        {currentPage > 1 && (\r\n          <li>\r\n            <a\r\n              href=\"#\"\r\n              onClick={() => setCurrentPage((prev) => prev - 1)}\r\n              className=\"inline-flex h-8 w-8 items-center justify-center rounded border border-gray-100 bg-white text-gray-900 rtl:rotate-180\"\r\n            >\r\n              <span className=\"sr-only\">Prev Page</span>\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                className=\"h-3 w-3\"\r\n                viewBox=\"0 0 20 20\"\r\n                fill=\"currentColor\"\r\n              >\r\n                <path\r\n                  fillRule=\"evenodd\"\r\n                  d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\"\r\n                  clipRule=\"evenodd\"\r\n                />\r\n              </svg>\r\n            </a>\r\n          </li>\r\n        )}\r\n\r\n        {Array.from({ length: totalPages }, (_, index) => index + 1).map(\r\n          (pageNum) => (\r\n            <li key={pageNum}>\r\n              <a\r\n                href=\"#\"\r\n                onClick={() => setCurrentPage(pageNum)}\r\n                className={`${\r\n                  pageNum === currentPage\r\n                    ? \"block h-8 w-8 rounded border-blue-600 bg-indigo-600 text-center leading-8 text-white\"\r\n                    : \"block h-8 w-8 rounded border border-gray-100 bg-white text-center leading-8 text-gray-900\"\r\n                }`}\r\n              >\r\n                {pageNum}\r\n              </a>\r\n            </li>\r\n          )\r\n        )}\r\n\r\n        {currentPage < totalPages && (\r\n          <li>\r\n            <a\r\n              href=\"#\"\r\n              onClick={() => setCurrentPage((prev) => prev + 1)}\r\n              className=\"inline-flex h-8 w-8 items-center justify-center rounded border border-gray-100 bg-white text-gray-900 rtl:rotate-180\"\r\n            >\r\n              <span className=\"sr-only\">Next Page</span>\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                className=\"h-3 w-3\"\r\n                viewBox=\"0 0 20 20\"\r\n                fill=\"currentColor\"\r\n              >\r\n                <path\r\n                  fillRule=\"evenodd\"\r\n                  d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\"\r\n                  clipRule=\"evenodd\"\r\n                />\r\n              </svg>\r\n            </a>\r\n          </li>\r\n        )}\r\n      </ol>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ResidentList from \"../../components/ResidentComps/ResidentList\";\r\nimport { getAuthToken } from \"../../util/Auth\";\r\nimport { json, useRouteLoaderData } from \"react-router-dom\";\r\n\r\nfunction AllResidentsPage() {\r\n  const residentsList = useRouteLoaderData(\"all-residents\");\r\n  return (\r\n    <React.Fragment>\r\n      <main>\r\n        <div className=\"mx-auto max-w-7xl py-6 sm:px-6 lg:px-8\">\r\n          <ResidentList residentsList={residentsList} />\r\n        </div>\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default AllResidentsPage;\r\n\r\nexport async function loader() {\r\n  const token = getAuthToken();\r\n\r\n  const response = await fetch(\"https://homes-test.onrender.com/residents\", {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw json({ message: \"Cant get residents\" }, { status: 500 });\r\n  } else {\r\n    const resData = await response.json();\r\n    ;\r\n    return resData;\r\n  }\r\n}\r\n\r\n"],"names":["ResidentList","_ref","residentsList","_useState","useState","_useState2","_slicedToArray","selectedResidentNames","setSelectedResidentNames","_useState3","_useState4","currentPage","setCurrentPage","filteredResidents","filter","resident","includes","first_name","length","totalResidents","totalPages","Math","ceil","startIndex","endIndex","residentsToShow","slice","_jsxs","_Fragment","children","_jsx","Flex","className","justifyContent","alignItems","Title","Icon","icon","InformationCircleIcon","variant","tooltip","MultiSelect","onValueChange","placeholder","map","item","MultiSelectItem","value","label","concat","last_name","type","onClick","csvData","Papa","blob","Blob","url","URL","createObjectURL","link","document","createElement","setAttribute","style","visibility","body","appendChild","click","removeChild","PrinterIcon","Table","TableHead","TableRow","TableHeaderCell","TableBody","TableCell","Link","to","id","age","date_registered","gender","href","prev","xmlns","viewBox","fill","fillRule","d","clipRule","Array","from","_","index","pageNum","useRouteLoaderData","React","loader","_loader","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","response","resData","wrap","_context","next","getAuthToken","fetch","method","headers","Authorization","sent","ok","json","message","status","abrupt","stop"],"sourceRoot":""}