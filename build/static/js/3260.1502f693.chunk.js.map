{"version":3,"file":"static/js/3260.1502f693.chunk.js","mappings":"8SA2IA,MAhHA,SAAgBA,GAAY,IAATC,EAAID,EAAJC,KAKXC,IAJkBC,EAAAA,EAAAA,IAAmB,QACnCC,WAGUH,EAAKI,KAAI,SAACC,GAAG,MAAM,CACnCC,KAAMD,EAAIE,cACV,aAAcF,EAAIG,WAClB,iBAAkBH,EAAII,eACtBC,OAAQL,EAAIM,OACb,KAED,OACEC,EAAAA,EAAAA,MAACC,EAAAA,SAAc,CAAAC,SAAA,EAEjBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMF,UACbF,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAAAH,SAAA,EACHC,EAAAA,EAAAA,KAACG,EAAAA,GAAK,CAAAJ,SAAC,uDACPC,EAAAA,EAAAA,KAACI,EAAAA,GAAS,CACRH,UAAU,OACVI,KAAMnB,EACNoB,MAAM,OACNC,WAAY,CAAC,aAAc,iBAAkB,UAC7CC,OAAQ,CAAC,UAAW,OAAQ,UAC5BC,WAAY,WAIpBT,EAAAA,EAAAA,KAAA,OAAAD,UACEF,EAAAA,EAAAA,MAACa,EAAAA,GAAI,CACHT,UAAU,cACVU,eAAe,QACfC,WAAW,SAAQb,SAAA,EAEnBC,EAAAA,EAAAA,KAACG,EAAAA,GAAK,CAAAJ,SAAC,UACPC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CACHC,KAAMC,EAAAA,EACNC,QAAQ,SACRC,QAAQ,4BAIdpB,EAAAA,EAAAA,MAAA,OAAKI,UAAU,iBAAgBF,SAAA,EAC7BC,EAAAA,EAAAA,KAACkB,EAAAA,GAAW,CACVjB,UAAU,yBACVkB,YAAY,iBAAgBpB,SAE3Bd,EAAKI,KAAI,SAAC+B,GAAI,OACbpB,EAAAA,EAAAA,KAACqB,EAAAA,GAAe,CAEdC,MAAOF,EAAK5B,cAAcO,SAEzBqB,EAAK5B,eAHD4B,EAAK5B,cAIM,OAGtBK,EAAAA,EAAAA,MAAC0B,EAAAA,GAAM,CAACtB,UAAU,yBAAyBuB,aAAa,MAAKzB,SAAA,EAC3DC,EAAAA,EAAAA,KAACyB,EAAAA,GAAU,CAACH,MAAM,MAAKvB,SAAC,UACxBC,EAAAA,EAAAA,KAACyB,EAAAA,GAAU,CAACH,MAAM,gBAAevB,SAAC,sBAEpCC,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACC,GAAG,KAAI5B,UACXF,EAAAA,EAAAA,MAAA,UACE+B,KAAK,SACL3B,UAAU,wJAAuJF,SAAA,EAEjKC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAe,CACd5B,UAAU,uCACV,cAAY,SACZ,yBAINJ,EAAAA,EAAAA,MAAA,UACE+B,KAAK,SACL3B,UAAU,wJAAuJF,SAAA,EAEjKC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAW,CACV7B,UAAU,uCACV,cAAY,SACZ,gBAKNJ,EAAAA,EAAAA,MAACkC,EAAAA,GAAK,CAAC9B,UAAU,OAAMF,SAAA,EACrBC,EAAAA,EAAAA,KAACgC,EAAAA,GAAS,CAAAjC,UACRF,EAAAA,EAAAA,MAACoC,EAAAA,GAAQ,CAAAlC,SAAA,EACPC,EAAAA,EAAAA,KAACkC,EAAAA,GAAe,CAAAnC,SAAC,mBACjBC,EAAAA,EAAAA,KAACkC,EAAAA,GAAe,CAACjC,UAAU,aAAYF,SAAC,SACxCC,EAAAA,EAAAA,KAACkC,EAAAA,GAAe,CAACjC,UAAU,aAAYF,SAAC,gBACxCC,EAAAA,EAAAA,KAACkC,EAAAA,GAAe,CAACjC,UAAU,aAAYF,SAAC,YACxCC,EAAAA,EAAAA,KAACkC,EAAAA,GAAe,CAACjC,UAAU,aAAYF,SAAC,kBAG5CC,EAAAA,EAAAA,KAACmC,EAAAA,GAAS,CAAApC,SACPd,EAAKI,KAAI,SAACC,GAAG,OACZO,EAAAA,EAAAA,MAACoC,EAAAA,GAAQ,CAAAlC,SAAA,EACPC,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACC,GAAE,KAAAS,OAAO9C,EAAI+C,IAAKtC,UACtBC,EAAAA,EAAAA,KAACsC,EAAAA,GAAS,CAAAvC,SAAET,EAAIE,mBAElBQ,EAAAA,EAAAA,KAACsC,EAAAA,GAAS,CAACrC,UAAU,aAAYF,SAAET,EAAII,kBACvCM,EAAAA,EAAAA,KAACsC,EAAAA,GAAS,CAACrC,UAAU,aAAYF,SAAET,EAAIG,cACvCO,EAAAA,EAAAA,KAACsC,EAAAA,GAAS,CAACrC,UAAU,aAAYF,SAAET,EAAIM,UACvCI,EAAAA,EAAAA,KAACsC,EAAAA,GAAS,CAACrC,UAAU,aAAYF,SAAET,EAAIiD,YAP1BjD,EAAI+C,GAQR,WAMvB,EC3HA,MATA,WACI,IAAMpD,GAAOE,EAAAA,EAAAA,IAAmB,QAClC,OACEa,EAAAA,EAAAA,KAACF,EAAAA,SAAc,CAAAC,UACXC,EAAAA,EAAAA,KAACwC,EAAO,CAACvD,KAAMA,KAGvB,EAIO,SAAewD,EAAMC,GAAA,OAAAC,EAAAC,MAAC,KAADC,UAAA,CAyBzB,SAAAF,IAAA,OAAAA,GAAAG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAzBI,SAAAC,EAAAjE,GAAA,IAAAkE,EAAAb,EAAAc,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAAA,EAAAA,KAAAQ,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGyB,OAHM1E,EAAP2E,QAAST,EAAMlE,EAANkE,OAC9Bb,EAAKa,EAAOb,GACdc,EAAM,kBAAoBd,EACxBe,GAAQQ,EAAAA,EAAAA,gBAAcJ,EAAAE,KAAA,EAELG,MAAMV,EAAK,CAChCW,OAAQ,MACRC,QAAS,CACPC,cAAe,UAAYZ,EAC3B,8BAA+B,OAEhC,KAAD,EANY,GAOU,OAPlBC,EAAQG,EAAAS,MAODC,OAAc,CAAAV,EAAAE,KAAA,eAAAF,EAAAW,OAAA,SAClBd,GAAQ,UAEO,MAApBA,EAASa,OAAc,CAAAV,EAAAE,KAAA,gBAAAF,EAAAW,OAAA,SAClBd,GAAQ,WAEZA,EAASe,GAAG,CAADZ,EAAAE,KAAA,eACRW,EAAAA,EAAAA,IAAK,CAAEC,QAAS,aAAe,CAAEJ,OAAQ,MAAO,KAAD,UAAAV,EAAAE,KAAA,GAGjCL,EAASgB,OAAO,KAAD,GAChB,OADff,EAAOE,EAAAS,KACbM,QAAQjF,IAAIgE,GAASE,EAAAW,OAAA,SACdb,GAAO,yBAAAE,EAAAgB,OAAA,GAAAvB,EAAA,MACfL,MAAA,KAAAC,UAAA,C,qEClBH,IAAM4B,EAAa3E,EAAAA,YAtBnB,SAAwBd,EAIrB0F,GAAQ,IAHTC,EAAK3F,EAAL2F,MACAC,EAAO5F,EAAP4F,QACGC,GAAKC,EAAAA,EAAAA,GAAA9F,EAAA+F,GAER,OAAoBjF,EAAAA,cAAoB,MAAOkF,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACR,cAAe,OACfC,IAAKb,EACL,kBAAmBE,GAClBC,GAAQF,EAAqB7E,EAAAA,cAAoB,QAAS,CAC3DuC,GAAIuC,GACHD,GAAS,KAAmB7E,EAAAA,cAAoB,OAAQ,CACzD0F,cAAe,QACfC,eAAgB,QAChBC,EAAG,gCAEP,IAEA,K","sources":["components/LogsComps/AllLogs.js","pages/LogsPages/AllLogsPage.js","../node_modules/@heroicons/react/24/outline/esm/ChevronLeftIcon.js"],"sourcesContent":["import React from \"react\";\r\nimport { Link, useRouteLoaderData } from \"react-router-dom\";\r\nimport {\r\n  ChevronLeftIcon,\r\n  InformationCircleIcon,\r\n  PrinterIcon,\r\n} from \"@heroicons/react/24/outline\";\r\nimport {\r\n  Icon,\r\n  Table,\r\n  TableRow,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeaderCell,\r\n  TableBody,\r\n  BadgeDelta,\r\n  Title,\r\n  Flex,\r\n  Select,\r\n  SelectItem,\r\n  MultiSelect,\r\n  MultiSelectItem,\r\n  DeltaType,\r\n  Card,\r\n  LineChart,\r\n} from \"@tremor/react\";\r\n\r\nfunction AllLogs({ logs }) {\r\n  const routeLoaderData = useRouteLoaderData(\"root\");\r\n  const { healthData } = routeLoaderData;\r\n\r\n  // Prepare the chart data\r\n  const chartData = logs.map((log) => ({\r\n    date: log.creation_date,\r\n    \"Heart Rate\": log.heart_rate,\r\n    \"Blood Pressure\": log.blood_pressure,\r\n    Weight: log.weight,\r\n  }));\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n  <div className=\"py-4\">\r\n          <Card>\r\n            <Title>Blood pressure, Heart Rate, and Weight Comparison</Title>\r\n            <LineChart\r\n              className=\"mt-6\"\r\n              data={chartData}\r\n              index=\"date\"\r\n              categories={[\"Heart Rate\", \"Blood Pressure\", \"Weight\"]}\r\n              colors={[\"emerald\", \"gray\", \"indigo\"]}\r\n              yAxisWidth={40}\r\n            />\r\n          </Card>\r\n        </div>\r\n      <div>\r\n        <Flex\r\n          className=\"space-x-0.5\"\r\n          justifyContent=\"start\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Title>Logs</Title>\r\n          <Icon\r\n            icon={InformationCircleIcon}\r\n            variant=\"simple\"\r\n            tooltip=\"Shows log history\"\r\n          />\r\n        </Flex>\r\n      </div>\r\n      <div className=\"flex space-x-2\">\r\n        <MultiSelect\r\n          className=\"max-w-full sm:max-w-xs\"\r\n          placeholder=\"Search date...\"\r\n        >\r\n          {logs.map((item) => (\r\n            <MultiSelectItem\r\n              key={item.creation_date}\r\n              value={item.creation_date}\r\n            >\r\n              {item.creation_date}\r\n            </MultiSelectItem>\r\n          ))}\r\n        </MultiSelect>\r\n        <Select className=\"max-w-full sm:max-w-xs\" defaultValue=\"all\">\r\n          <SelectItem value=\"all\">All </SelectItem>\r\n          <SelectItem value=\"creation_date\">creation date</SelectItem>\r\n        </Select>\r\n        <Link to=\"..\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50\"\r\n          >\r\n            <ChevronLeftIcon\r\n              className=\"-ml-0.5 mr-1.5 h-5 w-5 text-gray-400\"\r\n              aria-hidden=\"true\"\r\n            />\r\n            Back to Resident\r\n          </button>\r\n        </Link>\r\n        <button\r\n          type=\"button\"\r\n          className=\"inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50\"\r\n        >\r\n          <PrinterIcon\r\n            className=\"-ml-0.5 mr-1.5 h-5 w-5 text-gray-400\"\r\n            aria-hidden=\"true\"\r\n          />\r\n          Export\r\n        </button>\r\n      </div>\r\n\r\n      <Table className=\"mt-6\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableHeaderCell>Creation Date</TableHeaderCell>\r\n            <TableHeaderCell className=\"text-right\">B.P</TableHeaderCell>\r\n            <TableHeaderCell className=\"text-right\">Heart Rate</TableHeaderCell>\r\n            <TableHeaderCell className=\"text-right\">Weight</TableHeaderCell>\r\n            <TableHeaderCell className=\"text-right\">Voiding</TableHeaderCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {logs.map((log) => (\r\n            <TableRow key={log.id}>\r\n              <Link to={`./${log.id}`}>\r\n                <TableCell>{log.creation_date}</TableCell>\r\n              </Link>\r\n              <TableCell className=\"text-right\">{log.blood_pressure}</TableCell>\r\n              <TableCell className=\"text-right\">{log.heart_rate}</TableCell>\r\n              <TableCell className=\"text-right\">{log.weight}</TableCell>\r\n              <TableCell className=\"text-right\">{log.voiding}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default AllLogs;\r\n","import React from 'react'\r\nimport { getAuthToken } from '../../util/Auth';\r\nimport { json, useLoaderData, useRouteLoaderData } from 'react-router-dom';\r\nimport AllLogs from '../../components/LogsComps/AllLogs';\r\n\r\nfunction AllLogsPage() {\r\n    const logs = useRouteLoaderData(\"logs\")\r\n  return (\r\n    <React.Fragment>\r\n        <AllLogs logs={logs}/>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default AllLogsPage\r\n\r\nexport async function loader({ request, params }) {\r\n    const id = params.id;\r\n    let url = \"/daily-records/\" + id ;\r\n    const token = getAuthToken();\r\n  \r\n    const response = await fetch(url, {\r\n      method: \"get\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      },\r\n    });\r\n    if (response.status === 404) {\r\n      return response;\r\n    }\r\n    if (response.status === 400) {\r\n      return response;\r\n    }\r\n    if (!response.ok) {\r\n      throw json({ message: \"Wrong Url\" }, { status: 500 });\r\n    }\r\n  \r\n    const resData = await response.json();\r\n    console.log(resData);\r\n    return resData;\r\n  }","import * as React from \"react\";\nfunction ChevronLeftIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M15.75 19.5L8.25 12l7.5-7.5\"\n  }));\n}\nconst ForwardRef = React.forwardRef(ChevronLeftIcon);\nexport default ForwardRef;"],"names":["_ref","logs","chartData","useRouteLoaderData","healthData","map","log","date","creation_date","heart_rate","blood_pressure","Weight","weight","_jsxs","React","children","_jsx","className","Card","Title","LineChart","data","index","categories","colors","yAxisWidth","Flex","justifyContent","alignItems","Icon","icon","InformationCircleIcon","variant","tooltip","MultiSelect","placeholder","item","MultiSelectItem","value","Select","defaultValue","SelectItem","Link","to","type","ChevronLeftIcon","PrinterIcon","Table","TableHead","TableRow","TableHeaderCell","TableBody","concat","id","TableCell","voiding","AllLogs","loader","_x","_loader","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","url","token","response","resData","wrap","_context","prev","next","request","getAuthToken","fetch","method","headers","Authorization","sent","status","abrupt","ok","json","message","console","stop","ForwardRef","svgRef","title","titleId","props","_objectWithoutProperties","_excluded","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","strokeLinecap","strokeLinejoin","d"],"sourceRoot":""}